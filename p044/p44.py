#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Project Euler Problem #44
"""
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70  22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
"""

from math import sqrt   
  
class PentClass():
  def __init__(self):
    self.last_value = 1
    self.last_index = 1
    self.pent_list  = set([1])
    
  def isPentagonal(self,n):
    while n > self.last_value:
        self.last_index = len(self.pent_list)   
        self.last_value = pentagonal(self.last_index+1)
        self.pent_list.add(self.last_value)
    return (n in self.pent_list)
    
def genPentagonalList(n_max,n_start = 1):
    return set([x*(3*x-1)/2 for x in xrange(n_start,n_max+1)])

def pentagonal(x):
    return x*(3*x-1)/2

if __name__ == "__main__":
    
    P = PentClass()
    if P.isPentagonal(pentagonal(4) + pentagonal(7))\
    and not P.isPentagonal(pentagonal(4) - pentagonal(7)):
        print "Test passed."
    else:
        print "Test failed!"
    
    maxN = 10**4
    result = 10**8
    for i in xrange(1,maxN):
        a = pentagonal(i)
        for j in xrange(i+1,maxN): 
            b = pentagonal(j)
            if P.isPentagonal(a+b) and P.isPentagonal(b-a):
                if abs(a-b) < result:
                    result = abs(b-a)
                                    
    print "The answer to #44 is:%s" % result
