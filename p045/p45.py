#!/usr/bin/env python
# Project Euler Problem #45
"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n-1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

from math import sqrt
   
def triangle(n):
    return n*(n+1)/2

def isTriangle(P):
    """
    n^2/2 +n/2 - P = 0
    a = 1/2
    b = 1/2
    c = -P
    descriminant = b^2 - 4*a*c
    descriminant = (1/2)**2 - 4*(1/2)*(-P))
    root = (-b+-sqrt(b**2-(4*a*c))/(2*a)
    """
    descriminant = 0.25 - 2*-P
    if descriminant < 0:
        return False
    else:
        root1 = (-0.5+sqrt(descriminant))
        root2 = (-0.5-sqrt(descriminant))
        # return true if positive root is an integer
        if root1 % 1 ==0 and root1 >=0 \
        or root2 % 1 ==0 and root2 >=0:
            return True 
        else:
            return False   

def pentagonal(n):
    return n*(3*n-1)/2
    
def isPentagonal(P):
    """
    3n^2/2 +n/2 - P = 0
    a = 3/2
    b = -1/2
    c = -P
    descriminant = b^2 - 4*a*c
    descriminant = (-1/2)**2 - 4*(3/2)*(-P))
    root = (-b+-sqrt(b**2-(4*a*c))/(2*a)
    """
    descriminant = 0.25 - 6*-P
    if descriminant < 0:
        return False
    else:
        root1 = (0.5+sqrt(descriminant))/3
        root2 = (0.5-sqrt(descriminant))/3
        # return true if positive root is an integer
        if root1 % 1 ==0 and root1 >=0 \
        or root2 % 1 ==0 and root2 >=0:
            return True 
        else:
            return False      

def hexagonal(n):
    return n*(2*n-1)

def isHexagonal(P):
    """
    2n^2 -n - P = 0
    a =  2
    b = -1
    c = -P
    descriminant = b^2 - 4*a*c
    descriminant = (-1)**2 - 4*2*(-P)
    root = (-b+-sqrt(b**2-(4*a*c))/(2*a)
    """
    descriminant = 1.0 - 8*-P
    if descriminant < 0:
        return False
    else:
        root1 = (1.0+sqrt(descriminant))/4
        root2 = (1.0-sqrt(descriminant))/4
        # return true if positive root is an integer
        if root1 % 1 ==0 and root1 >=0 \
        or root2 % 1 ==0 and root2 >=0:
            return True 
        else:
            return False      


if __name__ == "__main__":

    #test
    if isTriangle(40755) and isPentagonal(40755) and isHexagonal(40755):
        print "Test #1 passed."
    else:
        print "Test #1 failed!"

    result = 0
    i = 286
    while result == 0:
        val = hexagonal(i)     # hexagonal series creates largest steps
        if isPentagonal(val):  # all hexagonal values are triagonal
            result = val
            break
        else:
            i+=1    
    print "The answer to #45 is: %s" %result 
